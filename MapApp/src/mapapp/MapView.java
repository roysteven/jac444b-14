package mapapp;
/**
*To display the UI and perform the fuctions to dispaly the map of London
*@author: Jianhui Chen, Zhizhong Xin
*@version: 1.0
*@since    1.0
*/
/**
 * Declare:
 * All original source code are come from
 *     http://today.java.net/pub/a/today/2007/10/30/building-maps-into-swing-app-with-jxmapviewer.html
 */

import gglMpsSttcAccessor.GoogleMapGeocoding;

import org.apache.commons.httpclient.HttpException;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.xml.xpath.XPathException;

import org.jdesktop.swingx.mapviewer.GeoPosition;

//import components.FileChooserDemo;

/**
 * The application's main frame.
 */
public class MapView extends FrameView {

    public MapView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox(ActionEvent e) {
        if (aboutBox == null) {
            JFrame mainFrame = MapApp.getApplication().getMainFrame();
            aboutBox = new MapAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        MapApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jXMapKit1 = new org.jdesktop.swingx.JXMapKit();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        //2012.03.31
        // New component of Zoom in and Zoom out
        jButton3 = new javax.swing.JButton("Zoom In");
        jButton4 = new javax.swing.JButton("Zoom Out");
        
        // 2012.03.24
        // New component of drop down list for the location searching
        locationList = new javax.swing.JComboBox();
        // Initial data for the JComoBox
        String[] locationExamples = {
        		"London, UK",
                "Toronto, Canada",
                "Chicago, USA"
        };
        locationList = new JComboBox(locationExamples);
        locationList.setAutoscrolls(true);

        // 2012.03.26
        // Initial JTextField 
        locationEdit = new javax.swing.JTextField("Press Enter to Go To Location!");
      
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jXMapKit1.setDefaultProvider(org.jdesktop.swingx.JXMapKit.DefaultProviders.OpenStreetMaps);
        jXMapKit1.setDataProviderCreditShown(true);
        jXMapKit1.setName("jXMapKit1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(mapapp.MapApp.class).getContext().getActionMap(MapView.class, this);
        jButton1.setAction(actionMap.get("goChicago")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("addWaypoint")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        // Add new JButtons to the UI
        // 2012.03.31 For the zoom in button
        // 2012.03.31 For the zoom out button
        jButton3.setAction(actionMap.get("zoomIn")); 
        jButton3.setName("jButton3"); // NOI18N

        jButton4.setAction(actionMap.get("zoomOut")); 
        jButton4.setName("jButton4"); // NOI18N
        
        // Add the new JComBox to the UI
        //2012.03.24
        locationList.setAction(actionMap.get("geogList"));
        locationList.setName("jComBox1");
        locationList.setSize(100, 15);
        
        // Add the new JEditBox to the UI
        //2012.03.24
        locationEdit.setAction(actionMap.get("editAct"));
        locationEdit.setName("jEditBox");
        locationEdit.setSize(200, 15);
        
        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(locationList)  // 2012.03.24 JComboBox 
                .add(locationEdit)  // 2012.03.26 JTextField
                .add(20, 20, 20)    // The space between text field "locationEdit" and button "zoomIn"
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton3)      // 2012.03.31 ZoomIn Button
                .add(jButton4))     // 2012.03.31 ZoomOut Button
            .add(jXMapKit1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                .add(jXMapKit1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(locationList)  // 2012.03.24 JComboBox
                    .add(locationEdit)  // 2012.03.24 JTextField
                    .add(jButton3)      // 2012.03.31 ZoomIn Button
                    .add(jButton4)))    // 2012.03.31 ZoomOut Button
        );

        menuBar.setName("menuBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mapapp.MapApp.class).getContext().getResourceMap(MapView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);
        
        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusMessageLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 228, Short.MAX_VALUE)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(statusMessageLabel)
                    .add(statusAnimationLabel)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    // These two new methods for the map zoom in and zoom out
    // These methods will perform the zoom in and zoom out action from UI
    // The range of zoom from 1 to 15
    // 2012.03.30   
    /**
     * Increase 1 when click the ZoomIn Button.
     * Resets the zoom when out of range.
     */
    @org.jdesktop.application.Action
    public void zoomIn() {
    	// The action: Click the zoomIn button will increase 1
    	i = i + 1;
    	// The action resets the zoom with the method "setZoom"
    	if ( i < 15 ) {
			jXMapKit1.setZoom(i);
    	}else{
       	// If out of the range of zoom, zoomIn action will be set 15    		
    		jXMapKit1.setZoom(15);
    		i = 15;
    	}
    }
    /**
     * Decrease 1 when click the ZoomOut Button.
     * Resets the zoom when out of range.
     */    
    @org.jdesktop.application.Action
    public void zoomOut() {
    	// The action: Click the zoomOut button will decrease 1
    	i = i - 1;
    	// The action resets the zoom with the method "setZoom" 
    	if ( i > 1 ){
			jXMapKit1.setZoom(i);
    	}else{
    	// If out of the range of zoom, zoomOut action will be set 1
    		jXMapKit1.setZoom(1);
    		i = 1;
    	}
    }   
    
    // 2012.03.24
    /**
     * Display the specification google map when the item of drop down list of Location of JComboBox is selected.
 	 * The parameter of jXMapKit1.setAddressLocation(latitude, longitude) come form calling gmg.Geocoding(saddress).
     */      
    @org.jdesktop.application.Action
    public void geogList() throws HttpException, IOException, XPathException {
    	// modify by chen jian hui for the feather to get lat/lng from geo-google api by the name of address;
    	// If one item in the JComboBox is selected, restore this item value into saddress 
    	String saddress = (String)locationList.getSelectedItem();
        GoogleMapGeocoding gmg = new GoogleMapGeocoding();
        gmg.InitRequestCommand();
        // 
        if (gmg.Geocoding(saddress) && gmg.IsOkey())
        {
            gmg.GetAddressInfo();
            // Get the Google map by call GeoPosition method with parameters latitude and longitude which come from object "gmg"
            jXMapKit1.setAddressLocation(new GeoPosition(gmg.GetLat(),gmg.GetLng()));
            // Set up the default zoom size with 9
            jXMapKit1.setZoom(9); 
        }             
    }
    
    // This is the new method for the address enter by detail of particular location
    // then,click on the 'ok' button to get the map
    // 2012.03.26
    /**
     * Display the specification google map when inputting Street, City, and Country in the JTextField and press Enter.
 	 * The parameter of jXMapKit1.setAddressLocation(latitude, longitude) come form calling gmg.Geocoding(saddress).
 	 * Restore the accessed location into JComboBox(drop down list) which name is "locationList".
     */     
    @org.jdesktop.application.Action
    public void editAct() throws HttpException, IOException, XPathException {
    	//modify by chen jian hui for the feather to get lat/lng from geo-google api by the name of address;
    	String saddress = locationEdit.getText();
    	if(saddress.isEmpty())
    		saddress = locationEdit.getSelectedText();
        GoogleMapGeocoding gmg = new GoogleMapGeocoding();
        gmg.InitRequestCommand();
        if (gmg.Geocoding(saddress) && gmg.IsOkey())
        {
            gmg.GetAddressInfo();
            jXMapKit1.setAddressLocation(new GeoPosition(gmg.GetLat(),gmg.GetLng()));
            jXMapKit1.setZoom(9);
            locationList.insertItemAt(saddress, 0);//add by chen jian hui for collecting the data to combox list.2012.03.27
            //gmg.QuitGoogle();// modify by chen jian hui: Don't need to disconnect to google anymore, 
            				   // it automatically disconnect by itself when the task is done well.
        }               
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;

    // 2012.03.31 jButton3 and jButton4 are used on the UI which are for zoom in and zoom out 
    private javax.swing.JButton jButton3; // New button for zoom in
    private javax.swing.JButton jButton4; // New button for zoom out 
    private int i = 9; // zoom default value
    
    // 2012.03.24
    // To display the default lacations and restore the locations which come from Text Field component 
    private JComboBox locationList;
    
    // 2012.03.26
    // This can be input the Location from keyboard
    private JTextField locationEdit; 

    private org.jdesktop.swingx.JXMapKit jXMapKit1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
